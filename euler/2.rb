# frozen_string_literal: true

# Even Fibonacci numbers
# Problem 2

# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
#  find the sum of the even-valued terms.

# I actually solved this inside a single method in like 6 lines but didn't realize I had solved it and made this instead...
def even_fibonacci(n)
  # p "n is #{n}"
  return 0 if n == 1
  return 1 if n < 3

  even_fibonacci(n - 1) + even_fibonacci(n - 2)
end

# p even_fibonacci(100)

def count_sum(n = 1, sum = 0)
  result = even_fibonacci(n)
  return sum if result >= 4_000_000

  p "sum is #{sum}"
  sum += result if (result % 2).zero?
  n += 1
  count_sum(n, sum)
end

p count_sum
